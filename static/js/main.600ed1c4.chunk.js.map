{"version":3,"sources":["BLEConnect.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["ledCharacteristic","connectionName","onDisconnected","alert","handleNotifications","event","value","target","console","log","getUint8","options","filters","services","connect","navigator","bluetooth","requestDevice","then","device","name","addEventListener","gatt","server","getPrimaryService","service","getCharacteristic","characteristic","startNotifications","_","catch","error","writeData","data","data2","Uint8Array","writeValue","err","receiveData","readValue","BLE","require","App","className","onClick","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"8LAAA,oLAEA,IAAIA,EAAoB,KAEbC,EAAe,UAO1B,SAASC,IACLC,MAAM,gBAEV,SAASC,EAAoBC,GAC3B,IAAIC,EAAQD,EAAME,OAAOD,MACzBE,QAAQC,IAAI,UAAWH,EAAMI,SAAS,IAUxC,IAAIC,EAAU,CACZC,QAAS,CAAC,CAACC,SAAU,CAAC,2CAWjB,SAASC,IACZN,QAAQC,IAAI,kCACZM,UAAUC,UAAUC,cAAcN,GAC7BO,MAAK,SAAAC,GAMF,OALAX,QAAQC,IAAI,WAAaU,EAAOC,MAChCnB,EAAekB,EAAOC,KACtBZ,QAAQC,IAAI,sCAAsCU,GAClDA,EAAOE,iBAAiB,yBAA0BnB,GAE3CiB,EAAOG,KAAKR,aAEtBI,MAAK,SAAAK,GAEF,OADAf,QAAQC,IAAI,yBAAyBc,GAC9BA,EAAOC,kBAAkB,2CAEnCN,MAAK,SAAAO,GAEF,OADAjB,QAAQC,IAAI,0BAA0BgB,GAC/BA,EAAQC,kBAAkB,2CAEpCR,MAAK,SAAAS,GAIF,OAHAnB,QAAQC,IAAI,4BAA4BkB,GACxC3B,EAAoB2B,EArD9BxB,MAAM,cAEQ,EAqDGH,EAAkB4B,qBAAqBV,MAAK,SAAAW,GACjDrB,QAAQC,IAAI,2BACZT,EAAkBqB,iBAAiB,6BAC/BjB,SAGT0B,OAAM,SAAAC,GACHvB,QAAQC,IAAI,UAAWsB,MAO5B,SAASC,EAAUC,GACxB,IAAIC,EAAQ,IAAIC,WAAW,CAACF,IAC5B,OAAOjC,EAAkBoC,WAAW,CAACF,IAChCJ,OAAM,SAAAO,GAAG,OAAI7B,QAAQC,IAAI,6BAA8B4B,MAEvD,SAASC,IACdtC,EAAkBuC,YACjBrB,MAAK,SAAAe,GACJ,IAAI3B,EAAQ2B,EAAKvB,SAAS,GAC1BF,QAAQC,IAAI,gBAAgBH,MAE7BwB,OAAM,SAAAO,GAAG,OAAI7B,QAAQC,IAAI,6BAA8B4B,Q,wECnFtDG,G,UAAMC,EAAQ,KACdT,EAAY,KA8BDU,MA7Bf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAQC,QAAS,WACfJ,EAAI1B,YADN,QAKD,6BACA,2BACE+B,SAAU,SAACxC,GAAgB2B,EAAU3B,EAAME,OAAOD,SAGnD,4BAAQsC,QAAS,WACfJ,EAAIR,UAAUA,KADhB,eAKD,6BACA,4BAAQY,QAAS,WACdJ,EAAIF,gBADP,gBCbaQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBxC,WACrBA,UAAUyC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAM6B,c","file":"static/js/main.600ed1c4.chunk.js","sourcesContent":["'use strict';\r\n\r\nlet ledCharacteristic = null;\r\nlet poweredOn = false;\r\nexport let connectionName=\"Nothing\"\r\nfunction onConnected() {\r\n  alert(\"Connected\")\r\n\r\n    poweredOn = true;\r\n}\r\n\r\nfunction onDisconnected() {\r\n    alert(\"Disconnected\")\r\n}\r\nfunction handleNotifications(event) {\r\n  let value = event.target.value;\r\n  console.log('value> ' ,value.getUint8(0));\r\n  let a = [];\r\n  // Convert raw data bytes to hex values just for the sake of showing something.\r\n  // In the \"real\" world, you'd use data.getUint8, data.getUint16 or even\r\n  // TextDecoder to process raw data bytes.\r\n  // for (let i = 0; i < value.byteLength; i++) {\r\n  //   a.push('0x' + ('00' + value.getUint8(i).toString(16)).slice(-2));\r\n  // }\r\n  // console.log('> ' + a.join(' '));\r\n}\r\nlet options = {\r\n  filters: [{services: ['0000180f-0000-1000-8000-00805f9b34fb']},],\r\n  // filters: [\r\n  //   {services: ['heart_rate']},\r\n  //   {services: [0x1802, 0x1803]},\r\n  //   {services: ['c48e6067-5295-48d3-8d5c-0395f61792b1']},\r\n  //   {name: 'ExampleName'},\r\n  //   {namePrefix: 'Prefix'}\r\n  // ],\r\n  // optionalServices: ['0x2A04'],\r\n  // acceptAllDevices: true\r\n}\r\nexport function connect() {\r\n    console.log('Requesting Bluetooth Device...');\r\n    navigator.bluetooth.requestDevice(options)\r\n        .then(device => {\r\n            console.log('> Found ' + device.name);\r\n            connectionName=device.name\r\n            console.log('Connecting to GATT Server... device',device);\r\n            device.addEventListener('gattserverdisconnected', onDisconnected)\r\n            \r\n            return device.gatt.connect();\r\n        })\r\n        .then(server => {\r\n            console.log('Getting Service server',server);\r\n            return server.getPrimaryService(\"0000180f-0000-1000-8000-00805f9b34fb\");//0x0000cafe00001000800000805f9b34fb\r\n        })\r\n        .then(service => {\r\n            console.log('Getting Characteristic ',service);\r\n            return service.getCharacteristic(\"00002a19-0000-1000-8000-00805f9b34fb\");//0x0000000300001000800000805f9b34fb\r\n        })\r\n        .then(characteristic => {\r\n            console.log('All ready! characteristic',characteristic);\r\n            ledCharacteristic = characteristic;\r\n            onConnected();\r\n            return ledCharacteristic.startNotifications().then(_ => {\r\n              console.log('> Notifications started');\r\n              ledCharacteristic.addEventListener('characteristicvaluechanged',\r\n                  handleNotifications);\r\n            });\r\n        })\r\n        .catch(error => {\r\n            console.log('Error! ', error);\r\n        });\r\n}\r\n\r\n\r\n\r\n\r\nexport function writeData(data) { //write the characteristic value\r\n  let data2 = new Uint8Array([data]);\r\n  return ledCharacteristic.writeValue([data2])\r\n      .catch(err => console.log('Error when writing value! ', err));\r\n}\r\nexport function receiveData() { //write the characteristic value\r\n  ledCharacteristic.readValue()\r\n  .then(data => {\r\n    let value = data.getUint8(0);\r\n    console.log('Data received',value);\r\n\r\n}).catch(err => console.log('Error when reading value! ', err));\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nvar BLE = require(\"./BLEConnect\")\nvar writeData = \"11\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={()=>{\n          BLE.connect()\n\n        }}>SCAN</button>\n       \n       <div>\n       <input\n         onChange={(event: any) => {writeData=event.target.value}}\n        />\n        \n        <button onClick={()=>{\n          BLE.writeData(writeData)\n\n        }}>Write Data</button>\n       </div>\n       <br/>\n       <button onClick={()=>{\n          BLE.receiveData()\n\n        }}>Read Data</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}